Setup terraform for GCP:
------------------
configure terraform: https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference
create service account: https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances
get the key of the service account
set the key to env:  $Env:GOOGLE_APPLICATION_CREDENTIALS += "$HOME/pleco/pleco1-03fa8c3141cd.json"
$Env:GOOGLE_APPLICATION_CREDENTIALS="d:\\dev\\pleco\\gcp\\pleco-322305-49e9fee21dca.json"
Running Terraform outside of Google Cloud
If you are running terraform outside of Google Cloud, generate a service account key and set the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of the service account key. Terraform will use that key for authentication.

Disabling mtls authentication
mtls authentication will soon become enabled by default if your system supports it. To disable mtls authentication at any point set GOOGLE_API_USE_CLIENT_CERTIFICATE to false.

Add to Firewall rule with all traffic

Hello world:
---------------------
kubectl apply -f https://k8s.io/examples/service/load-balancer-example.yaml
kubectl expose deployment hello-world --type=LoadBalancer --name=my-service
kubectl get services my-service

Get APISERVER & TOKEN:
----------------------
# Check all possible clusters, as your .KUBECONFIG may have multiple contexts:
kubectl config view -o jsonpath='{"Cluster name\tServer\n"}{range .clusters[*]}{.name}{"\t"}{.cluster.server}{"\n"}{end}'

# Select name of cluster you want to interact with from above output:
export CLUSTER_NAME="gke_oldpleco_us-west2-a_west"

# Point to the API server referring the cluster name
APISERVER=$(kubectl config view -o jsonpath="{.clusters[?(@.name==\"$CLUSTER_NAME\")].cluster.server}")

# Gets the token value
TOKEN=$(kubectl get secrets -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='default')].data.token}"|base64 --decode)
echo $APISERVER
echo $TOKEN

# Explore the API with TOKEN
curl -X GET $APISERVER/api --header "Authorization: Bearer $TOKEN" --insecure

curl -X GET  https://34.70.180.27/api --header "Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IlI1bFJsLTJXNkR5MWV2VGlpajdoNEtsazNRT0pSUzVHa3VCTWQ2QkZ3eHcifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tZzl3am0iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImU4ZjQ3YWUyLTljOTgtNDkxMC05YWVkLTVjNmQ5OTU4MDhlOSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.kSKQAAb5n2v4jvrppGPPlycMVx6mP59PUzBkdmbpEI8cTXbPfBouGRmUEtaK8IE55G_h08RylzocSOL3Fnl5Fkb8om_vzuGAuKbSCyccIjRP8Zu7Mxp-1eesP7gOYqiB8aMpptCGJ6ChlKF2UNyJttRj2B_VvXff2SBGW4EbJ-8Ew2TNDzXwhTHVojvdHF3-8986D-96VScX9yBuJ9nYV5p-oPkRMXl2LLajSSkOaBnxIt63dMm_s6ZtWyIx2ixBxo8lMsuU2VWePslX_XfWT3Hh289Z3LyaKUl9ibeKwybwqMcclcmlsT0hgErQbCajWDObsantk40fvStMnFjeKQ" --insecure


Service Account Permission:
---------------------------
kubectl create clusterrolebinding serviceaccounts-cluster-admin \
  --clusterrole=cluster-admin \
  --group=system:serviceaccounts


For Stand Alone KIND Clusters:
-------------------------------
Install Docker:
-----------------
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh

sudo groupadd docker
sudo usermod -aG docker ${USER}
LOGOUT

Install Kind:
------------------
curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
chmod +x ./kind
mkdir bin
export PATH=$HOME/bin:$PATH
mv ./kind /$HOME/bin/kind
kind create cluster

Install kubectl:
---------------------
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
sudo install -o root -g root -m 0755 kubectl $HOME/bin/kubectl
Install Metalib
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/master/manifests/namespace.yaml
kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/master/manifests/metallb.yaml
kubectl get pods -n metallb-system --watch
#kubectl apply -f https://kind.sigs.k8s.io/examples/loadbalancer/metallb-configmap.yaml

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - 172.18.255.200-172.18.255.250
EOF

Working State:
deployed on 1 Node
7929e4d0deed   guypleco/aws:lts   "python pleco_targetâ€¦"   2 hours ago   Up 2 hours   10.10.0.14:50051->50051/tcp
 ecstatic_engelbart

Internal IP 10.10.0.14 (nic0)
External IP 104.197.16.122

Main:
ho = "107.178.210.34"
po:443
channel = grpc.insecure_channel("104.197.16.122:50051") #GCP


